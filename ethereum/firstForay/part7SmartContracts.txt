Smart Contracts

* A series of ethereum virtual machine opcodes as defined by the ethereum yellow paper.
* Typically write smart contracts in a higher level language that compiles down to
opcodes
* Most popular language for doing this: Solidity

tmux

https://www.digitalocean.com/community/tutorials/how-to-install-and-use-tmux-on-ubuntu-12-10--2

{
	"dependencies": {
		"web3": "0.17.0-alpha",
		"solc": "^0.4.4"
	}
}

Run test rpc, then node console. In the node console:

var Web3 = require('web3')

var web3 = new Web3(new Web3.providers.HttpProvider('http://localhost:8545'));
var solc = require('solc')

var source = `contract HelloWorld {
  
  function displayMessage() constant returns (string) {
    return "Hello from a smart contract";
  }
  
}`

var compiled = solc.compile(source)

compiled.contracts[':HelloWorld']

compiled.contracts[':HelloWorld'].bytecode
compiled.contracts[':HelloWorld'].opcodes

The abi:

compiled.contracts[':HelloWorld'].interface

var abi = JSON.parse(compiled.contracts[':HelloWorld'].interface)

var helloWorldContract = web3.eth.contract(abi)

//How much gas to deploy contract? Use the solidity online compiler...

https://remix.ethereum.org/

//Deploy contract
var deployed = helloWorldContract.new({
  from: web3.eth.accounts[0],
  data: compiled.contracts[':HelloWorld'].bytecode,
  gas: 4700000,
  gasPrice: 5,
},(error, contract) => {})

Transaction, and contract address.

Two kinds of addresses in Ethereum: personal accounts, and contracts

//Inspect the transaction
web3.eth.getTransaction("txnid")

deployed var from above - reference to the contract

deployed.address

helloContract.at(_) - pass in the address to get reference the deployed contract

Can call public methods on the deployed contract via the reference

deployed.displayMessage.call()
