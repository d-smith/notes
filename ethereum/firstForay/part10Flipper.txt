Part 10

https://www.youtube.com/watch?v=dq-gBPvDgrc&index=10&list=PLV1JDFUtrXpFh85G-Ddyy2kLSafaB9biQ

If you define a value in the object when you're making a transaction
to a contract, that value of ether will get passed into the contract
that you can access in the msg.value property.

payable keyword - function must be payable if you want to send ether
to it

deployed.makeWager({from:acct1, value: web3.toWei(5,'ether')})
decypher.etherBalance(deployed.address)

In accept wager we want to only transition state if the accepted amount
matches the wager. If it doesn't, we have to throw to rollback the 
transaction, because returning false if the accepted amout was wrong
would not transition state but would still credit the value to the 
contract.

Randomness - simulating radomness on the blockchain is notoriously 
difficult.

web3.eth.blockNumber
web3.eth.getBlock(1)

The block hash has some Randomness... you can get the hash of previous blocks
that have been mined before.

THere's a type in solidity that's a 256 bit integer. In wolfram alpha
you can calulate 2 ^ 256 which is the number of different values

115792089237316195423570985008687907853269984665640564039457584007913129639936

Force convert a block has into a uint 256 - will be one of the valid values,
there's an equally likely chance that the bit converted hash is higher or lower
than the mid point which is (2 ^ 256) / 2.

Which is:

57896044618658097711785492504343953926634992332820282019728792003956564819968
