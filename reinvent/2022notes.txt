

# Deep Racer workshop

* goal - easy way to get hands on with reinforcement learning
* deepracer evo - latest model
* simulator in the console

AI - building an algorithm which can take and proces information
to inform future decisions

ML - subset of AI, teaching an algorithm (creating a model) how to learningwithout explicitly
being programmed to do simulator

* supervised
* unsupervised - pattern detection
* reinforcement

Key terms

* Agent - piece of software, deep racer creating
* Environment - environment the agent interacts with
* State - for example the position on the track
* Action - based on the state the agent decides an action to take
* Reward - positive rewards if the action was good, negative if no good
* Episode - iteration


Reward function - incentivizes particular behaviors and is at the core at
reinforcement learning

HOw?

Rewards that incentivize centerline driving - weight the reward based on the car`
being on the line or not

Exploration vs exploitation

NN architecture for deep racer

* image as input (greyscale)
* cnn feature detection - track borders, center line, action output layer
* policy network to weight the extracted features

Action space - space of actions your car can take

* discrete 
* continuous

input data -> openvino optimized model -> openvino interence engine -> control action

sagemaker - train model
s3 - store the model
cloudwatch - model training logs
kinesis videostreams - capture the data from the input streams

Track components - many definitions

Track coordinates - x,y waypoints
Heading - which way you are Heading

distance from center parameters - wink wink

architecture

## Application Recovery Controller WOrkshop

A case study in global fault isolation

https://aws.amazon.com/blogs/architecture/a-case-study-in-global-fault-isolation/


Route 53 ARC 

* Multi AZ recovery - zonal shift
    * temporarily shift away traffic from an az is the zone has an outage
    * available for alb and nlb at the resource level
    * grant access and go
* Multi-region
    * Routing controls
        * Reliable - routing controls are durably stored across five AWS regions and can be
        changed through any one of five unqiue regional endpoints
        * Single tenant - changes to routing controls effect changes through route 53 APIs
    * Safety rules
        * customer configuratble rules that set preconfitions when making changes to routing controls
    * Readiness checks
        * Checks for provisioned capacity, resource limits, replication latency, custom readiness checks via custom cloudwatch alarms
        * Can also be used for migration between regions and/or accounts
        * Currently only available is us-west-2, don't rely on this in duress, use this to access
        the readyiness of your Application
        



